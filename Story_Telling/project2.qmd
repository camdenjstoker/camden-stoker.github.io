title: "Client Report - Finding Relationships in Baseball"
subtitle: "Course DS 250"
author: "[Camden Stoker]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

 ## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__  

_type your results and analysis here_

```{python}
# Include and execute your code here
query1 = """
SELECT
    cp.playerID AS 'Player ID',
    sc.schoolID AS 'School ID',
    s.salary AS 'Salary',
    s.yearID AS 'Year ID',
    s.teamID AS 'Team ID'
FROM Salaries s
INNER JOIN People p ON s.playerID = p.playerID
INNER JOIN CollegePlaying cp  ON p.playerID = cp.playerID
INNER JOIN Schools sc ON cp.schoolID = sc.schoolID
WHERE sc.name_full = 'Brigham Young University-Idaho'
ORDER BY s.salary DESC;
"""

df_player = pd.read_sql_query(query1, con)
print(df_player.head(10))


```


## QUESTION|TASK 2

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__  
    a. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.  
    a. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.  
    a. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.  

_type your results and analysis here_

```{python}
# Include and execute your code here
query2 = """
SELECT
    playerID AS 'Player ID',
    yearID AS 'Year ID',
    ROUND(CAST(H AS FLOAT)/AB,3) AS batting_avg 
FROM    Batting
WHERE   AB >= 1
ORDER   BY batting_avg DESC, playerID ASC
LIMIT   5;
"""

df_batting_avg = pd.read_sql_query(query2, con)
print(df_batting_avg)

```

```{python}
# Include and execute your code here
query2b = """
SELECT
    playerID AS 'Player ID',
    yearID AS 'Year ID',
    ROUND(CAST(H AS FLOAT)/AB,3) AS batting_avg 
FROM    Batting
WHERE   AB >= 10
ORDER   BY batting_avg DESC, playerID ASC
LIMIT   5;
"""

df_batting_avg = pd.read_sql_query(query2b, con)
print(df_batting_avg)

```

```{python}
# Include and execute your code here
query2c = """
SELECT
    playerID AS 'Player ID',
    yearID AS 'Year ID',
    ROUND(CAST(H AS FLOAT)/AB,3) AS batting_avg 
FROM    Batting
GROUP BY playerID
HAVING AB >=100
ORDER   BY batting_avg DESC, playerID ASC
LIMIT   5;
"""

df_batting_avg = pd.read_sql_query(query2c, con)
print(df_batting_avg)
 

```


## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?__

_type your results and analysis here_

```{python}
query3 = """
SELECT
    teamID AS 'Team',
    yearID AS 'Year',
    ROUND(AVG(salary), 2) AS avg_salary
FROM Salaries
WHERE teamID IN ('NYA', 'BOS')
GROUP BY teamID, yearID
ORDER BY yearID, teamID;
"""

df_salary_comparison = pd.read_sql_query(query3, con)
print(df_salary_comparison.head(10))

ggplot(df_salary_comparison, aes(x='Year', y='avg_salary', color='Team')) + \
    geom_line(size=2) + \
    geom_point(size=3) + \
    ggtitle('Average Salary by Year: Yankees vs Red Sox') + \
    xlab('Year') + \
    ylab('Average Salary (USD)')
```
*Discussion:*
What I have learned from this data is that the New York Yankees has pretty much been always been better to some extent. But the gap really was not very big until 2003.
---

## STRETCH QUESTION|TASK 1

__Advanced Salary Distribution by Position (with Case Statement):__  

    * Write an SQL query that provides a summary table showing the average salary for each position (e.g., pitcher, catcher, outfielder). Position information can be found in the fielding table in the POS column. 
    
        Include the following columns:

        * position
        * average_salary
        * total_players
        * highest_salary  

    * The highest_salary column should display the highest salary ever earned by a player in that position. 

    * Additionally, create a new column called salary_category using a case statement:  

        * If the average salary is above $3 million, categorize it as “High Salary.”
        * If the average salary is between $2 million and $3 million, categorize it as “Medium Salary.”
        * Otherwise, categorize it as “Low Salary.”  

    * Order the table by average salary in descending order.

    **Hint:** Beware, it is common for a player to play multiple positions in a single year. For this analysis, each player’s salary should only be counted toward one position in a given year: the position at which they played the most games that year. This will likely require a (sub-query)[https://docs.data.world/documentation/sql/concepts/advanced/WITH.html].

    

_type your results and analysis here_

```{python}
# Include and execute your code here
```


## STRETCH QUESTION|TASK 2

__Advanced Career Longevity and Performance (with Subqueries):__

    * Calculate the average career length (in years) for players who have played at least **10 games**. Then, identify the top 10 players with the longest careers (based on the number of years they played). Include their: 

        * playerID
        * first_name
        * last_name
        * career_length

    * The career_length should be calculated as the difference between the maximum and minimum yearID for each player.  

_type your results and analysis here_

```{python}
# Include and execute your code here

# Define the query
qr = """
SELECT playerID, yearID, AB
FROM Batting
WHERE playerID = 'addybo01'
LIMIT 2;
"""

# Now execute it correctly
df_at_bats = pd.read_sql_query(qr, con)
print(df_at_bats)


total_ab = df_at_bats['AB'].sum()
print(f"Total at-bats for addybo01: {total_ab}")

# Query hits and at-bats for addybo01 in 1871
qr2 = """
SELECT playerID, yearID, H, AB
FROM Batting
WHERE playerID = 'addybo01' AND yearID = 1871;
"""

df_1871 = pd.read_sql_query(qr2, con)
print(df_1871)

# Only calculate batting average if data exists
if not df_1871.empty:
    hits = df_1871['H'].iloc[0]
    at_bats = df_1871['AB'].iloc[0]
    
    if at_bats > 0:
        batting_avg = round(hits / at_bats, 3)
        print(f"Batting average for addybo01 in 1871: {batting_avg}")
    else:
        print("No at-bats recorded in 1871 for addybo01.")
else:
    print("No data found for addybo01 in 1871.")

# Check all years for addybo01
pd.read_sql_query("SELECT yearID, H, AB FROM Batting WHERE playerID = 'addybo01';", con)

```

---

